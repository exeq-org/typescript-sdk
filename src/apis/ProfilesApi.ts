/* tslint:disable */
/* eslint-disable */
/**
 * Exeq API
 * Remote on-demand browser infrastructure platform API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@exeq.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InternalServerErrorResponse,
  InternalServerPublicProfile,
  InternalServerPublicProfileList,
} from '../models/index';
import {
    InternalServerErrorResponseFromJSON,
    InternalServerErrorResponseToJSON,
    InternalServerPublicProfileFromJSON,
    InternalServerPublicProfileToJSON,
    InternalServerPublicProfileListFromJSON,
    InternalServerPublicProfileListToJSON,
} from '../models/index';

export interface V1ProfilesIdGetRequest {
    id: string;
}

/**
 * 
 */
export class ProfilesApi extends runtime.BaseAPI {

    /**
     * Lists all browser profiles for the organization
     * List browser profiles
     */
    async v1ProfilesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InternalServerPublicProfileList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/profiles`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalServerPublicProfileListFromJSON(jsonValue));
    }

    /**
     * Lists all browser profiles for the organization
     * List browser profiles
     */
    async v1ProfilesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InternalServerPublicProfileList> {
        const response = await this.v1ProfilesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieves details of a specific browser profile
     * Get browser profile
     */
    async v1ProfilesIdGetRaw(requestParameters: V1ProfilesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InternalServerPublicProfile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling v1ProfilesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/profiles/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalServerPublicProfileFromJSON(jsonValue));
    }

    /**
     * Retrieves details of a specific browser profile
     * Get browser profile
     */
    async v1ProfilesIdGet(requestParameters: V1ProfilesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InternalServerPublicProfile> {
        const response = await this.v1ProfilesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
