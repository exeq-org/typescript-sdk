/* tslint:disable */
/* eslint-disable */
/**
 * Exeq API
 * Remote on-demand browser infrastructure platform API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@exeq.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InternalServerErrorResponse,
  InternalServerPublicCreateSessionRequest,
  InternalServerPublicExtendSessionRequest,
  InternalServerPublicSession,
  InternalServerPublicSessionList,
} from '../models/index';
import {
    InternalServerErrorResponseFromJSON,
    InternalServerErrorResponseToJSON,
    InternalServerPublicCreateSessionRequestFromJSON,
    InternalServerPublicCreateSessionRequestToJSON,
    InternalServerPublicExtendSessionRequestFromJSON,
    InternalServerPublicExtendSessionRequestToJSON,
    InternalServerPublicSessionFromJSON,
    InternalServerPublicSessionToJSON,
    InternalServerPublicSessionListFromJSON,
    InternalServerPublicSessionListToJSON,
} from '../models/index';

export interface V1SessionsGetRequest {
    limit?: number;
    offset?: number;
}

export interface V1SessionsIdDeleteRequest {
    id: string;
}

export interface V1SessionsIdExtendPostRequest {
    id: string;
    internalServerPublicExtendSessionRequest: InternalServerPublicExtendSessionRequest;
}

export interface V1SessionsIdGetRequest {
    id: string;
}

export interface V1SessionsPostRequest {
    internalServerPublicCreateSessionRequest: InternalServerPublicCreateSessionRequest;
}

/**
 * 
 */
export class SessionsApi extends runtime.BaseAPI {

    /**
     * Lists browser sessions with pagination
     * List browser sessions
     */
    async v1SessionsGetRaw(requestParameters: V1SessionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InternalServerPublicSessionList>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/sessions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalServerPublicSessionListFromJSON(jsonValue));
    }

    /**
     * Lists browser sessions with pagination
     * List browser sessions
     */
    async v1SessionsGet(requestParameters: V1SessionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InternalServerPublicSessionList> {
        const response = await this.v1SessionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stops an active browser session
     * Stop browser session
     */
    async v1SessionsIdDeleteRaw(requestParameters: V1SessionsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling v1SessionsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/sessions/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Stops an active browser session
     * Stop browser session
     */
    async v1SessionsIdDelete(requestParameters: V1SessionsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.v1SessionsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Extends the duration of an active browser session
     * Extend session duration
     */
    async v1SessionsIdExtendPostRaw(requestParameters: V1SessionsIdExtendPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InternalServerPublicSession>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling v1SessionsIdExtendPost().'
            );
        }

        if (requestParameters['internalServerPublicExtendSessionRequest'] == null) {
            throw new runtime.RequiredError(
                'internalServerPublicExtendSessionRequest',
                'Required parameter "internalServerPublicExtendSessionRequest" was null or undefined when calling v1SessionsIdExtendPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/sessions/{id}/extend`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InternalServerPublicExtendSessionRequestToJSON(requestParameters['internalServerPublicExtendSessionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalServerPublicSessionFromJSON(jsonValue));
    }

    /**
     * Extends the duration of an active browser session
     * Extend session duration
     */
    async v1SessionsIdExtendPost(requestParameters: V1SessionsIdExtendPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InternalServerPublicSession> {
        const response = await this.v1SessionsIdExtendPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves details of a specific browser session
     * Get browser session
     */
    async v1SessionsIdGetRaw(requestParameters: V1SessionsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InternalServerPublicSession>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling v1SessionsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/sessions/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalServerPublicSessionFromJSON(jsonValue));
    }

    /**
     * Retrieves details of a specific browser session
     * Get browser session
     */
    async v1SessionsIdGet(requestParameters: V1SessionsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InternalServerPublicSession> {
        const response = await this.v1SessionsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new browser session
     * Create browser session
     */
    async v1SessionsPostRaw(requestParameters: V1SessionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InternalServerPublicSession>> {
        if (requestParameters['internalServerPublicCreateSessionRequest'] == null) {
            throw new runtime.RequiredError(
                'internalServerPublicCreateSessionRequest',
                'Required parameter "internalServerPublicCreateSessionRequest" was null or undefined when calling v1SessionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/sessions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InternalServerPublicCreateSessionRequestToJSON(requestParameters['internalServerPublicCreateSessionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalServerPublicSessionFromJSON(jsonValue));
    }

    /**
     * Creates a new browser session
     * Create browser session
     */
    async v1SessionsPost(requestParameters: V1SessionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InternalServerPublicSession> {
        const response = await this.v1SessionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
