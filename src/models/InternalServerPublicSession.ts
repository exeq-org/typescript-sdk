/* tslint:disable */
/* eslint-disable */
/**
 * Exeq API
 * Remote on-demand browser infrastructure platform API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@exeq.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface InternalServerPublicSession
 */
export interface InternalServerPublicSession {
    /**
     * 
     * @type {string}
     * @memberof InternalServerPublicSession
     */
    cdpUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof InternalServerPublicSession
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof InternalServerPublicSession
     */
    expiresAt?: string;
    /**
     * 
     * @type {string}
     * @memberof InternalServerPublicSession
     */
    id?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InternalServerPublicSession
     */
    residentialProxyEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InternalServerPublicSession
     */
    sessionRecordingEnabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InternalServerPublicSession
     */
    sessionRecordingUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof InternalServerPublicSession
     */
    status?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InternalServerPublicSession
     */
    stealthModeEnabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InternalServerPublicSession
     */
    vncPassword?: string;
    /**
     * 
     * @type {string}
     * @memberof InternalServerPublicSession
     */
    vncUrl?: string;
}

/**
 * Check if a given object implements the InternalServerPublicSession interface.
 */
export function instanceOfInternalServerPublicSession(value: object): value is InternalServerPublicSession {
    return true;
}

export function InternalServerPublicSessionFromJSON(json: any): InternalServerPublicSession {
    return InternalServerPublicSessionFromJSONTyped(json, false);
}

export function InternalServerPublicSessionFromJSONTyped(json: any, ignoreDiscriminator: boolean): InternalServerPublicSession {
    if (json == null) {
        return json;
    }
    return {
        
        'cdpUrl': json['cdp_url'] == null ? undefined : json['cdp_url'],
        'createdAt': json['created_at'] == null ? undefined : json['created_at'],
        'expiresAt': json['expires_at'] == null ? undefined : json['expires_at'],
        'id': json['id'] == null ? undefined : json['id'],
        'residentialProxyEnabled': json['residential_proxy_enabled'] == null ? undefined : json['residential_proxy_enabled'],
        'sessionRecordingEnabled': json['session_recording_enabled'] == null ? undefined : json['session_recording_enabled'],
        'sessionRecordingUrl': json['session_recording_url'] == null ? undefined : json['session_recording_url'],
        'status': json['status'] == null ? undefined : json['status'],
        'stealthModeEnabled': json['stealth_mode_enabled'] == null ? undefined : json['stealth_mode_enabled'],
        'vncPassword': json['vnc_password'] == null ? undefined : json['vnc_password'],
        'vncUrl': json['vnc_url'] == null ? undefined : json['vnc_url'],
    };
}

export function InternalServerPublicSessionToJSON(json: any): InternalServerPublicSession {
    return InternalServerPublicSessionToJSONTyped(json, false);
}

export function InternalServerPublicSessionToJSONTyped(value?: InternalServerPublicSession | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'cdp_url': value['cdpUrl'],
        'created_at': value['createdAt'],
        'expires_at': value['expiresAt'],
        'id': value['id'],
        'residential_proxy_enabled': value['residentialProxyEnabled'],
        'session_recording_enabled': value['sessionRecordingEnabled'],
        'session_recording_url': value['sessionRecordingUrl'],
        'status': value['status'],
        'stealth_mode_enabled': value['stealthModeEnabled'],
        'vnc_password': value['vncPassword'],
        'vnc_url': value['vncUrl'],
    };
}

