/* tslint:disable */
/* eslint-disable */
/**
 * Exeq API
 * Remote on-demand browser infrastructure platform API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@exeq.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { InternalServerPublicCreateSessionRequestToJSON, InternalServerPublicExtendSessionRequestToJSON, InternalServerPublicProfileFromJSON, InternalServerPublicProfileListFromJSON, InternalServerPublicSessionFromJSON, InternalServerPublicSessionListFromJSON, } from '../models/index';
/**
 *
 */
export class ApikeyApi extends runtime.BaseAPI {
    /**
     * Lists all browser profiles for the organization
     * List browser profiles
     */
    v1ProfilesGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            let urlPath = `/v1/profiles`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => InternalServerPublicProfileListFromJSON(jsonValue));
        });
    }
    /**
     * Lists all browser profiles for the organization
     * List browser profiles
     */
    v1ProfilesGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1ProfilesGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves details of a specific browser profile
     * Get browser profile
     */
    v1ProfilesIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling v1ProfilesIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            let urlPath = `/v1/profiles/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => InternalServerPublicProfileFromJSON(jsonValue));
        });
    }
    /**
     * Retrieves details of a specific browser profile
     * Get browser profile
     */
    v1ProfilesIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1ProfilesIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Lists browser sessions with pagination
     * List browser sessions
     */
    v1SessionsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['offset'] != null) {
                queryParameters['offset'] = requestParameters['offset'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            let urlPath = `/v1/sessions`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => InternalServerPublicSessionListFromJSON(jsonValue));
        });
    }
    /**
     * Lists browser sessions with pagination
     * List browser sessions
     */
    v1SessionsGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.v1SessionsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Stops an active browser session
     * Stop browser session
     */
    v1SessionsIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling v1SessionsIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            let urlPath = `/v1/sessions/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Stops an active browser session
     * Stop browser session
     */
    v1SessionsIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1SessionsIdDeleteRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Extends the duration of an active browser session
     * Extend session duration
     */
    v1SessionsIdExtendPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling v1SessionsIdExtendPost().');
            }
            if (requestParameters['internalServerPublicExtendSessionRequest'] == null) {
                throw new runtime.RequiredError('internalServerPublicExtendSessionRequest', 'Required parameter "internalServerPublicExtendSessionRequest" was null or undefined when calling v1SessionsIdExtendPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            let urlPath = `/v1/sessions/{id}/extend`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: InternalServerPublicExtendSessionRequestToJSON(requestParameters['internalServerPublicExtendSessionRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => InternalServerPublicSessionFromJSON(jsonValue));
        });
    }
    /**
     * Extends the duration of an active browser session
     * Extend session duration
     */
    v1SessionsIdExtendPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1SessionsIdExtendPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves details of a specific browser session
     * Get browser session
     */
    v1SessionsIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling v1SessionsIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            let urlPath = `/v1/sessions/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => InternalServerPublicSessionFromJSON(jsonValue));
        });
    }
    /**
     * Retrieves details of a specific browser session
     * Get browser session
     */
    v1SessionsIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1SessionsIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Creates a new browser session
     * Create browser session
     */
    v1SessionsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['internalServerPublicCreateSessionRequest'] == null) {
                throw new runtime.RequiredError('internalServerPublicCreateSessionRequest', 'Required parameter "internalServerPublicCreateSessionRequest" was null or undefined when calling v1SessionsPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = yield this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
            }
            let urlPath = `/v1/sessions`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: InternalServerPublicCreateSessionRequestToJSON(requestParameters['internalServerPublicCreateSessionRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => InternalServerPublicSessionFromJSON(jsonValue));
        });
    }
    /**
     * Creates a new browser session
     * Create browser session
     */
    v1SessionsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.v1SessionsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
